library(TSstudio)
library(dplyr)
library(readr)
library(ggplot2)
library(tidyverse)
library(dygraphs)
library(forecast)
library(stats)
library(tseries)
setwd("C:/Users/KEBE/Documents/A-DataScience/Time-serie/bike+sharing+dataset")
day<-read.csv("day.csv",header = TRUE,sep=",")
head(day,n=10)
dim(day)
hour<-read.csv("hour.csv",header = TRUE,sep=",")
head(hour)
list(colnames(day))
list(colnames(hour))
#Avec Hour
mois_stats_hour<-hour %>%
group_by(mnth) %>%
summarise(mean_temp=mean(temp),
mean_humidité=mean(hum),
mean_wind_speed = mean(windspeed),
total_cnt = sum(cnt))
mois_stats_hour
#Avec Day
mois_stats_day<-day %>%
group_by(mnth) %>%
summarise(mean_temp=mean(temp),
mean_humidité=mean(hum),
mean_wind_speed = mean(windspeed),
total_cnt = sum(cnt))
mois_stats_day
# ces deux tableaux resument les moyennes de température , de l’humidité, de la vitesse du vent et le total des locations par mois
cnt_day<-day %>%
select(dteday,cnt) %>%
arrange(dteday) %>%
mutate(dteday = as.Date(dteday)) %>%
column_to_rownames(var = "dteday")
cnt_day
#cnt_day<-cnt_day %>%
# select(cnt)
cnt_day_ts <- ts(data = cnt_day,
start = c(2011),
frequency = 30)
plot(cnt_day_ts)
cnt_day_ts <- ts(data = cnt_day,
start = c(2011),
frequency = 365)
plot(cnt_day_ts)
anyNA(day$cnt)
model_hw <- HoltWinters(cnt_day_ts,beta=FALSE)
model_hw
plot(model_hw)
hw_forecast <- forecast(model_hw,
h =365)
cnt_day_ts %>%
autoplot() +
autolayer(hw_forecast$mean, series = "forecast HoltWinter")
adf.test(cnt_day_ts)
# Calcule de l'ACF et PACF des résidus
acf(residuals(model_hw), main = "ACF des résidus du modèle Holt-Winters")
pacf(residuals(model_hw), main = "PACF des résidus du modèle Holt-Winters")
count_cnt <- ts(cnt_day, frequency = 30)
plot(count_cnt, col="blue")
decompose<- decompose(count_cnt)
plot(decompose,col='blue')
cnt_deseasonalized<-count_cnt - decompose$seasonal
plot(count_cnt, col = "blue", xlab="Time by months")
lines(cnt_deseasonalized,col="red")
legend(1, 8600, legend=c("count_ma", "deseasonal_cnt"), col=c("blue", "red"), lty=1:2, cex=0.8)
acf(cnt_deseasonalized,main="ACF")
pacf(cnt_deseasonalized,main="PACF")
cnt_diff<-diff(cnt_deseasonalized,differences = 1)
adf.test(cnt_diff, alternative = "stationary")
model_arima2 <- arima(cnt_deseasonalized, order = c(9, 0,8 ))
forecast_values <- forecast(model_arima2)
plot(forecast_values, xlab = "Date", ylab = "Nombre de vélos", main = "Prévisions avec modèle ARIMA")
lines(cnt_day_ts, col = "blue")
end.time = time(cnt_deseasonalized)[700]
train.set <- window(cnt_deseasonalized, end=end.time)
test.set <- window(cnt_deseasonalized, start=end.time)
model.arima <- Arima(train.set, order=c(9, 0, 8))
model.arima.fc <- forecast(model.arima, h=32)
print(paste("Accuracy du modele Arima  : ", accuracy(model.arima.fc, test.set)[2,"RMSE"]))
model.arima <- Arima(train.set, order=c(9, 0, 8))
model.arima.fc <- forecast(model.arima, h=32)
model.arima
print(paste("Accuracy du modele Arima  : ", accuracy(model.arima.fc, test.set)[2,"RMSE"]))
model.autoarima <- auto.arima(train.set,seasonal = FALSE)
model.autoarima
model.aotoarima.fc <- forecast(model.autoarima, h=32)
print(paste("Accuracy modele Auto Arima : ", accuracy(model.aotoarima.fc, test.set)[2,"RMSE"]))
checkresiduals(model.arima)
checkresiduals(model.autoarima)
cnt_day_ts <- ts(data = cnt_day,
#start = c(2011),
frequency = 30)
plot(cnt_day_ts)
model_hw <- HoltWinters(cnt_day_ts)
model_hw
plot(model_hw)
hw_forecast <- forecast(model_hw,
h =365)
cnt_day_ts %>%
autoplot() +
autolayer(hw_forecast$mean, series = "forecast HoltWinter")
hw_forecast <- forecast(model_hw,
h =30)
cnt_day_ts %>%
autoplot() +
autolayer(hw_forecast$mean, series = "forecast HoltWinter")
cnt_day_ts <- ts(data = cnt_day,
start = c(2011),
frequency = 365)
plot(cnt_day_ts)
model_hw <- HoltWinters(cnt_day_ts)
model_hw
plot(model_hw)
hw_forecast <- forecast(model_hw,
h =365)
cnt_day_ts %>%
autoplot() +
autolayer(hw_forecast$mean, series = "forecast HoltWinter")
cnt_day_ts <- ts(data = cnt_day,
#start = c(2011),
frequency = 30)
plot(cnt_day_ts)
hw_forecast <- forecast(model_hw,
h =30)
cnt_day_ts %>%
autoplot() +
autolayer(hw_forecast$mean, series = "forecast HoltWinter")
cnt_day_ts <- ts(data = cnt_day,
start = c(2011),
frequency = 365)
plot(cnt_day_ts)
model_hw <- HoltWinters(cnt_day_ts)
model_hw
plot(model_hw)
hw_forecast <- forecast(model_hw,
h =365)
cnt_day_ts %>%
autoplot() +
autolayer(hw_forecast$mean, series = "forecast HoltWinter")
model_hw <- HoltWinters(cnt_day_ts,seasonal = "additive")
model_hw
plot(model_hw)
View(cnt_day)
View(cnt_day)
View(day)
View(day)
?HoltWinters()
library(shiny); runApp('A-DataScience/Dev-Web-R/Shiny/Projet.R')
library(shiny); runApp('A-DataScience/Dev-Web-R/Shiny/Projet.R')
library(shiny); runApp('A-DataScience/Dev-Web-R/projetWeb/ProjetApp.R')
library(shiny); runApp('ProjetApp.R')
